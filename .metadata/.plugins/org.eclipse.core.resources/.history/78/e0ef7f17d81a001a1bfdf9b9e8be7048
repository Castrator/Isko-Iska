package GameState;

import TileMap.Background;
import Entity.Animation;
import Entity.Barrier;
import Entity.Booklet;
import Entity.Iska;
import Entity.Isko;
import Entity.Platform;
import Entity.Water;
import Entity.Button;

import java.awt.*;
import java.awt.image.BufferedImage;
import java.util.ArrayList;

import javax.imageio.ImageIO;

public class Level3State extends GameState{
	
	private Background bg;
	private Animation black;
	private Isko isko;
	private Iska iska;
	private ArrayList<Platform> platform;
	private ArrayList<Water> water;
	private ArrayList<Booklet> booklet;
	private ArrayList<Barrier> barrier;
	private ArrayList<Button> button;
	private Button btn1;
	private Button btn2;
	private boolean reset;

	public Level3State (GameStateManager gsm){
		this.gsm = gsm;
		
		BufferedImage frame;
		BufferedImage[] frames = new BufferedImage[5];
		black = new Animation();
		try {
			frame = ImageIO.read(getClass().getResourceAsStream("/Background/blackscreen.png"));
			for(int i = 0; i < 5; i++) {
				frames[i] = frame;
			}
		}catch(Exception e) {
			e.printStackTrace();
		}
		black.setFrames(frames);
		black.setDelay(200);
		init();
	}
	
	public void init() {
		platform = new ArrayList<Platform>();
		water = new ArrayList<Water>();
		booklet = new ArrayList<Booklet>();
		barrier = new ArrayList<Barrier>();
		button = new ArrayList<Button>();
		try {
			bg = new Background("/Background/Map2/Background.png", 0);
			bg.setVector(0, 0);
			isko = new Isko(43, 40);
			iska = new Iska(690, 40);
			iska.facing = -1;
			platform.add(new Platform(0, 669, "Map2/bottomborder.png"));
			platform.add(new Platform(0, 0, "Map2/topborder.png"));
			platform.add(new Platform(0, 0, "Map2/leftborder.png"));
			platform.add(new Platform(868, 0, "Map2/rightborder.png"));
			
			platform.add(new Platform(43, 112, "Map2/platform0.png"));
			platform.add(new Platform(682, 112, "Map2/platform0.png"));
			
			
			water.add(new Water(190, 666, "orangelong"));
			booklet.add(new Booklet(682, 610, "orange"));
	
//			
//			btn1 = new Button(687, 457);
//			button.add(btn1);
//			btn2 = new Button(175, 457);
//			button.add(btn2);
//			barrier.add(new Barrier(429, 396, btn1, btn2));
			reset = false;
		}catch(Exception e) {
			e.printStackTrace();
		}
	}
	public void update() {
		if(reset) {
			black.update();
		}else {
			if(isko.smokeAnimation.hasPlayedOnce() || iska.smokeAnimation.hasPlayedOnce()) {
				reset = true;
			}
			for(int i = 0; i < platform.size(); i++) {
				isko.checkPlatformCollision(platform.get(i));
				iska.checkPlatformCollision(platform.get(i));
			}
			for(int i = 0; i < water.size(); i++) {
				water.get(i).update();
				if(isko.checkCollision(water.get(i), true)){
					if(!water.get(i).getColor().equals("blue")) {
						isko.dead = true;
					}
				}
				if(iska.checkCollision(water.get(i), true)){
					if(!water.get(i).getColor().equals("orange")) {
						iska.dead = true;
					}
				}
			}
			for(int i = 0; i < booklet.size(); i++) {
				booklet.get(i).update();
				if(isko.checkCollision(booklet.get(i), false) && booklet.get(i).getColor().equals("blue")){
					booklet.get(i).destroy();
				}
				if(iska.checkCollision(booklet.get(i), false) && booklet.get(i).getColor().equals("orange")){
					booklet.get(i).destroy();
				}
				if(booklet.get(i).hasPlayedOnce()){
					booklet.remove(booklet.get(i));
				}
			}
			for(int i = 0; i < barrier.size(); i++) {
				barrier.get(i).update();
				isko.checkPlatformCollision(barrier.get(i));
				iska.checkPlatformCollision(barrier.get(i));
			}
			for(int i = 0; i < button.size(); i++) {
				button.get(i).update();
				if(isko.checkCollision(button.get(i), true)) {
					button.get(i).pressed = true;
				}else if(iska.checkCollision(button.get(i), true)) {
					button.get(i).pressed = true;
				}else {
					button.get(i).pressed = false;
				}
			}
			isko.update();
			iska.update();
		}
	}
	public void draw(Graphics2D g) {
		if(reset) {
			g.drawImage(black.getImage(), 0, 0, null);
			if(black.hasPlayedOnce()) {
				init();
				black.setPlayedOnce(false);
			}
		}else {
			bg.draw(g);
			for(int i = 0; i < platform.size(); i++) {
				platform.get(i).draw(g);
			}
			for(int i = 0; i < barrier.size(); i++) {
				barrier.get(i).draw(g);
			}
			for(int i = 0; i < booklet.size(); i++) {
				booklet.get(i).draw(g);
			}
			isko.draw(g);
			iska.draw(g);
			for(int i = 0; i < water.size(); i++) {
				water.get(i).draw(g);
			}
			for(int i = 0; i < button.size(); i++) {
				button.get(i).draw(g);
			}
		}
	}
	
	public void keyPressed(int k) {
		isko.keyPressed(k);
		iska.keyPressed(k);
	}
	public void keyReleased(int k) {
		isko.keyReleased(k);
		iska.keyReleased(k);
	}
}

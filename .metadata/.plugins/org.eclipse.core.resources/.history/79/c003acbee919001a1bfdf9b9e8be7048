package Entity;

import java.util.ArrayList;
import javax.imageio.ImageIO;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;

public class Isko extends GameObject{
	
	private Animation animation;
	private ArrayList<BufferedImage[]> sprites;
	private final int[] numFrames = {12, 8, 1, 2, 1};
	private static final int IDLE = 0;
	private static final int RUNNING = 1;
	private static final int JUMPING = 2;
	private static final int FALLING = 3;
	private static final int LANDING = 4;
	
	private static final int MAX_SPEED = 4;
	private static final double ACCELERATION = 0.25;
	private static final double GRAVITY = 0.50;
	
	//Action
	private int actionState;
	private boolean idle;
	private boolean running;
	private boolean jumping;
	
	//Direction
	private int facing;

	public Isko(int x, int y) {
		super(x, y);
		animation = new Animation();
		sprites = new ArrayList<BufferedImage[]>();
		loadSprites("idle", 12);
		loadSprites("run", 8);
		loadSprites("jumping", 1);
		loadSprites("falling", 2);
		loadSprites("landing", 1);
		animation.setFrames(sprites.get(IDLE));
		animation.setDelay(100);
		idle = true;
		facing = 1;
	}
	
	public void loadSprites(String s, int n) {
		BufferedImage frame;
		BufferedImage[] bi = new BufferedImage[n];
		for(int i = 0; i < n; i++) {
			try {
				frame = ImageIO.read(getClass().getResourceAsStream(String.format("/Sprites/Isko/%s%d.png", s, i)));
				bi[i] = frame;
			}catch(Exception e) {
				e.printStackTrace();
			}
		}
		sprites.add(bi);
	}
	
	public void keyPressed(int k) {
		if(k == KeyEvent.VK_D || k == KeyEvent.VK_A) {
			if(!jumping) {
				running = true;
			}else {
				running = false;
			}
			idle = false;
			if(k == KeyEvent.VK_A) {
				facing = -1;
				ax = -ACCELERATION;
			}
			if(k == KeyEvent.VK_D) {
				facing = 1;
				ax = ACCELERATION;
			}
		}
		if(k == KeyEvent.VK_SPACE && actionState != 3) {
			jumping = true;
			idle = false;
			running = false;
			actionState = 3;
			y -= 100;
		}
	}
	
	public void keyReleased(int k) {
		if(k == KeyEvent.VK_D || k == KeyEvent.VK_A) {
			ax = 0;
		}
	}
	public void updateAction(){
		if(idle && actionState != 0) {
			animation.setFrames(sprites.get(IDLE));
			actionState = 0;
		}else if(running && actionState != 1) {
			animation.setFrames(sprites.get(RUNNING));
			actionState = 1;			
		}
	}
	
	public void updateDimension() {
		BufferedImage image = animation.getImage();
		width = image.getWidth() * 2;
		height = image.getHeight() * 2;
	}
	
	public boolean checkPlatformCollision(Platform platform) {
		destx += vx;
		desty += vy;
		
		Rectangle topLeft = new Rectangle(x, y, 1, 1);
		Rectangle topRight = new Rectangle(x + width, y, 1, 1);
		Rectangle bottomLeft = new Rectangle(x, y + height - 5, 1, 1);
		Rectangle bottomRight = new Rectangle(x + width, y + height, 1, 1);
		
		if(bottomLeft.intersects(platform.getRect()) && bottomRight.intersects(platform.getRect())) {
			y = platform.y - height + 1;
			jumping = false;
			return true;
		}return false;
	}

	public void updateSpeed(){
		//Move
		if(ax != 0) {
			vx += ax;	
		}else {
			if(vx > 0) {
				vx += -ACCELERATION;
			}else if(vx < 0) {
				vx += ACCELERATION;
			}else {
				idle = true;
				running = false;
			}
		}
		ay = GRAVITY;
		vy += ay;	

		//Max Speed
		if(vx > MAX_SPEED) {
			vx = MAX_SPEED;
		}if(vx < -MAX_SPEED) {
			vx = -MAX_SPEED;
		}
		if(vy > MAX_SPEED) {
			vy = MAX_SPEED;
		}if(vy < -MAX_SPEED) {
			vy = -MAX_SPEED;
		}
		
	}
	public void setPosition() {
		updateSpeed();
		x += vx;
		y += vy;				
	}
	
	public void update() {
//		System.out.println(width);
//		System.out.println(height);
		updateAction();
		updateDimension();
		setPosition();
		animation.update();
		animation.getFrame();

		
	}
	
	public void draw(Graphics2D g) {
		Image image = animation.getImage().getScaledInstance(width * 2, height * 2, BufferedImage.SCALE_DEFAULT);
		if(facing == -1) {
			g.drawImage(image, x + width, y, -width, height, null);
		}else {
			g.drawImage(image, x, y, width, height, null);
		}
		
	}

}

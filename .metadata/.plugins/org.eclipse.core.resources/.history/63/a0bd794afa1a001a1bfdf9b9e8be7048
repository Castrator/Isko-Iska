package Entity;

import java.util.ArrayList;
import javax.imageio.ImageIO;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;

public class Player extends GameObject{
	
	protected Animation animation;
	public Animation smokeAnimation;
	protected ArrayList<BufferedImage[]> sprites;
	protected final int[] numFrames = {4, 8, 1, 2, 1};
	protected static final int IDLE = 0;
	protected static final int RUNNING = 1;
	protected static final int JUMPING = 2;
	protected static final int FALLING = 3;
	protected static final int LANDING = 4;
	
	protected static final int MAX_SPEEDX = 3;
	protected static final int MAX_SPEEDY = 6;
	protected static final double ACCELERATION = 0.25;
	protected static final double GRAVITY = 0.20;
	
	//Action
	protected int actionState;
	protected boolean idle;
	protected boolean running;
	protected boolean jumping;
	protected boolean falling;
	public boolean dead;
	
	//Direction
	public int facing;
	public static final int RIGHT = 1;
	public static final int LEFT = -1;

	public Player(int x, int y, String name) {
		super(x, y);
		animation = new Animation();
		smokeAnimation = new Animation();
		sprites = new ArrayList<BufferedImage[]>();
		sprites.add(loadSprites(name, "idle", 4));
		sprites.add(loadSprites(name, "run", 8));
		sprites.add(loadSprites(name, "jumping", 1));
		sprites.add(loadSprites(name, "falling", 2));
		sprites.add(loadSprites(name, "landing", 1));
		animation.setFrames(sprites.get(IDLE));
		animation.setDelay(400);
		smokeAnimation.setFrames(loadSprites("Death", "smoke", 4));
		smokeAnimation.setDelay(300);
		idle = true;
		facing = RIGHT;
	}
	
	public BufferedImage[] loadSprites(String dir, String s, int n) {
		BufferedImage frame;
		BufferedImage[] bi = new BufferedImage[n];
		for(int i = 0; i < n; i++) {
			try {
				frame = ImageIO.read(getClass().getResourceAsStream(String.format("/Sprites/%s/%s%d.png", dir, s, i)));
				bi[i] = frame;
			}catch(Exception e) {
				e.printStackTrace();
			}
		}
		return bi;
	}
	
	public void updateDimension() {
		cdiff = 20;
		BufferedImage image = animation.getImage();
		width = image.getWidth() * 2;
		height = image.getHeight() * 2;
		cwidth = width - cdiff;
		cheight = height - cdiff;
	}
	
	public void keyPressed(int k) {
		if(k == KeyEvent.VK_D || k == KeyEvent.VK_A) {
			if(!jumping) {
				running = true;
			}else {
				running = false;
			}
			idle = false;
			if(k == KeyEvent.VK_A) {
				facing = LEFT;
				ax = -ACCELERATION;
			}
			if(k == KeyEvent.VK_D) {
				facing = RIGHT;
				ax = ACCELERATION;
			}
		}
		if(k == KeyEvent.VK_W && !jumping) {
			vy = -MAX_SPEEDY;
			jumping = true;
		}
	}
	
	public void keyReleased(int k) {
		if(k == KeyEvent.VK_D || k == KeyEvent.VK_A) {
			ax = 0;
		}
	}
	public void updateAction(){
		if(actionState != IDLE) {
			animation.setDelay(100);
		}
		if(jumping) {
			if(vy < -MAX_SPEEDY/3 && actionState != JUMPING) {
				animation.setFrames(sprites.get(JUMPING));
				actionState = JUMPING;
			}else if(vy >= -MAX_SPEEDY/3 && vy <= MAX_SPEEDY/3 && actionState != FALLING) {
				animation.setFrames(sprites.get(FALLING));
				actionState = FALLING;
			}else if(vy > MAX_SPEEDY/3 && actionState != LANDING){
				animation.setFrames(sprites.get(LANDING));
				actionState = LANDING;
			}
		}else if(vy > 1) {
			if(vy > 2 && actionState == FALLING) {
				animation.setFrames(sprites.get(LANDING));
				actionState = LANDING;	
			}else if(actionState == RUNNING) {
				animation.setFrames(sprites.get(FALLING));
				actionState = FALLING;
			}
		}else if(idle && actionState != IDLE) {
			animation.setFrames(sprites.get(IDLE));
			animation.setDelay(400);
			actionState = IDLE;
		}else if(running && actionState != RUNNING) {
			animation.setFrames(sprites.get(RUNNING));
			actionState = RUNNING;			
		}
	}
	//Corners
	public Rectangle topLeft() {
		if(facing == LEFT) {
			return new Rectangle(x + (cdiff/2) + 5, y + 5, 1, 1);
		}return new Rectangle(x + (cdiff/2) + 2, y + 5, 1, 1);
	}
	public Rectangle topRight() {
		if(facing == RIGHT) {
			return new Rectangle(x + width - (cdiff/2) - 8, y + 5, 1, 1);
		}return new Rectangle(x + width - (cdiff/2), y + 5, 1, 1);
	}
	public Rectangle bottomLeft() {
		if(facing == LEFT) {
			return new Rectangle(x + (cdiff/2) + 9, y + height - 6, 1, 1);
		}return new Rectangle(x + (cdiff/2) + 6, y + height - 6, 1, 1);
	}
	public Rectangle bottomRight() {
		if(facing == RIGHT) {
			return new Rectangle(x + width - (cdiff/2) - 12, y + height - 6, 1, 1);
		}return new Rectangle(x + width - (cdiff/2) - 4, y + height - 6, 1, 1);
	}
	//Sides
	public Rectangle left() {
		if(facing == RIGHT) {
			return new Rectangle(x + (cdiff/2) + 2, y + 16, 1, cheight - 16);
		}return new Rectangle(x + (cdiff/2) + 5, y + 16, 1, cheight - 16);		
	}
	public Rectangle right() {
		if(facing == RIGHT) {
			return new Rectangle(x + width - (cdiff/2), y + 16, 1, cheight - 16);
		}return new Rectangle(x + width - (cdiff/2), y + 16, 1, cheight - 16);		
	}
	public Rectangle top() {
		if(facing == RIGHT) {
			return new Rectangle(x + (cdiff/2) + 5, y + 7, cwidth - 11, 1);
		}return new Rectangle(x + (cdiff/2) + 5, y + 7, cwidth - 20, 1);	
	}
	public Rectangle bottom() {
		if(facing == RIGHT) {
			return new Rectangle(x + (cdiff/2) + 5, y + height, cwidth - 11, 1);
		}return new Rectangle(x + (cdiff/2) + 5, y + height, cwidth - 11, 1);		
	}
	
	public boolean checkCollision(GameObject o, boolean water) {
		if(water) {
			return this.bottomRight().intersects(o.getRect()) || this.bottomLeft().intersects(o.getRect());
		}
		return this.getCollisionRect().intersects(o.getRect());
	}
	
	public void checkPlatformCollision(GameObject platform) {
		//Left
		if(left().intersects(platform.getRect())) {
			if(vx < 0) {
				x = platform.x + platform.width - 14;
			}
		}
		//Right
		if(right().intersects(platform.getRect())) {
			if(vx > 0) {
				x = platform.x - width + 15;
			}
		}
		//Top
		if(top().intersects(platform.getRect()) && !left().intersects(platform.getRect()) && !right().intersects(platform.getRect())) {
			y = platform.y + platform.height - 7;
			vy = 0;
		}
		//Bottom
		if(bottom().intersects(platform.getRect())) {
			y = platform.y - height + 3;
			if(vy > 0) {
				vy = 0;
				jumping = false;
			}
			if(vx != 0) {
				running = true;
			}
		}
	}

	public void updateSpeed(){
		//Move
		if(ax != 0) {
			vx += ax;	
		}else {
			if(vx > 0) {
				vx += -ACCELERATION;
			}else if(vx < 0) {
				vx += ACCELERATION;
			}else {
				if(!jumping) {
					idle = true;
				}
				running = false;
			}
		}
		ay = GRAVITY;
		vy += ay;

		//Max Speed
		if(vx > MAX_SPEEDX) {
			vx = MAX_SPEEDX;
		}if(vx < -MAX_SPEEDX) {
			vx = -MAX_SPEEDX;
		}
		if(vy > MAX_SPEEDY) {
			vy = MAX_SPEEDY;
		}if(vy < -MAX_SPEEDY) {
			vy = -MAX_SPEEDY;
		}
		
	}
	public void setPosition() {
		updateSpeed();
		x += vx;
		y += vy;				
	}
	
	public void update() {
		if(dead) {
			smokeAnimation.update();
		}else {
			updateAction();
			animation.update();
			updateDimension();
			setPosition();
		}
	}
	
	public void draw(Graphics2D g) {
		Image image, image2;
		System.out.println(width + " " + height);
		if(width <= 0) {
			width = 1;
		}
		if(height <= 0) {
			height = 1;
		}	
		image = animation.getImage().getScaledInstance(width * 2, height * 2, BufferedImage.SCALE_DEFAULT);
		image2 = smokeAnimation.getImage().getScaledInstance(width * 2, height * 2, BufferedImage.SCALE_DEFAULT);
		if(dead && !smokeAnimation.hasPlayedOnce()) {
			g.drawImage(image2, x - 1, y + 3, width, height, null);
		}else if(!dead){
			if(facing == LEFT) {
				g.drawImage(image, x + width, y, -width, height, null);
			}else {
				g.drawImage(image, x, y, width, height, null);
			}
		}
	}
}

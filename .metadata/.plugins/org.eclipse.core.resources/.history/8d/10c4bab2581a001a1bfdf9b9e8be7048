package GameState;

import TileMap.Background;
import Entity.Booklet;
import Entity.Iska;
import Entity.Isko;
import Entity.Platform;
import Entity.Water;

import java.awt.*;
import java.awt.event.KeyEvent;
import java.util.ArrayList;

public class Level1State extends GameState{
	
	private Background bg;
	private Isko isko;
	private Iska iska;
	private ArrayList<Platform> platform;
	private ArrayList<Water> water;
	private ArrayList<Booklet> booklet;
//	private ArrayList<Platform> platform;

	public Level1State (GameStateManager gsm){
		this.gsm = gsm;
		
		try {
			bg = new Background("/Background/Map1/Background.png", 0);
			bg.setVector(0, 0);
			isko = new Isko(50, 200);
//			iska = new Iska(50, 300);
		}catch(Exception e) {
			e.printStackTrace();
		}
		init();
	}
	
	public void init() {
		platform = new ArrayList<Platform>();
		water = new ArrayList<Water>();
		booklet = new ArrayList<Booklet>();
		try {
			platform.add(new Platform(0, 669, "Map1/bottomborder.png"));
			platform.add(new Platform(0, 0, "Map1/topborder.png"));
			platform.add(new Platform(0, 0, "Map1/leftborder.png"));
			platform.add(new Platform(868, 0, "Map1/rightborder.png"));
			water.add(new Water(400, 666, "violetshort"));
			booklet.add(new Booklet(700, 600, "blue"));
			
		}catch(Exception e) {
			e.printStackTrace();
		}
	}
	public void update() {
		for(int i = 0; i < platform.size(); i++) {
			isko.checkPlatformCollision(platform.get(i));
//			iska.checkPlatformCollision(platform[i]);
		}
		for(int i = 0; i < water.size(); i++) {
			water.get(i).update();
			if(isko.checkCollision(water.get(i), true)){
				if(!water.get(i).getColor().equals("blue")) {
					System.out.println("Dead");
				}
			}
		}
		for(int i = 0; i < booklet.size(); i++) {
			booklet.get(i).update();
			if(isko.checkCollision(booklet.get(i), false) && booklet.get(i).getColor().equals("blue")){
				booklet.get(i).destroy();
			}
			if(booklet.get(i).hasPlayedOnce()){
				booklet.remove(booklet.get(i));
			}
		}
		isko.update();
//		iska.update();
	}
	public void draw(Graphics2D g) {
		bg.draw(g);
		for(int i = 0; i < platform.size(); i++) {
			platform.get(i).draw(g);
		}
		for(int i = 0; i < booklet.size(); i++) {
			booklet.get(i).draw(g);
		}
		isko.draw(g);
//		iska.draw(g);
		for(int i = 0; i < water.size(); i++) {
			water.get(i).draw(g);
		}
	}
	
	
	public void keyPressed(int k) {
		isko.keyPressed(k);
//		iska.keyPressed(k);
	}
	public void keyReleased(int k) {
		isko.keyReleased(k);
//		iska.keyReleased(k);
	}
}
